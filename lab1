import random
print("TIC_TAC_TOE")
board = ["-", "-", "-",
         "-", "-", "-",
         "-", "-", "-"]

def print_board():
    print(board[0] + " | " + board[1] + " | " + board[2])
    print(board[3] + " | " + board[4] + " | " + board[5])
    print(board[6] + " | " + board[7] + " | " + board[8])

def take_turn(player):
    print(player + "'s turn.")
    position = input("Choose a position from 1-9: ")
    while position not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
        position = input("Invalid input. Choose a position from 1-9: ")
    position = int(position) - 1  # Convert input to integer and adjust for 0-based index
    while board[position] != "-":
        position = int(input("Position already taken. Choose a different position: ")) - 1 # Adjust for 0-based index
    board[position] = player
    print_board()

def take_turn_computer(computer):
    print(computer + "'s turn.")
    position = random.randint(0, 8)
    while board[position] != "-":
        position = random.randint(0, 8)
    board[position] = computer
    print_board()

def check_game_over():

    if (board[0] == board[1] == board[2] != "-") or \
       (board[3] == board[4] == board[5] != "-") or \
       (board[6] == board[7] == board[8] != "-") or \
       (board[0] == board[3] == board[6] != "-") or \
       (board[1] == board[4] == board[7] != "-") or \
       (board[2] == board[5] == board[8] != "-") or \
       (board[0] == board[4] == board[8] != "-") or \
       (board[2] == board[4] == board[6] != "-"):
        return "win"

    elif "-" not in board:
      return "tie"

    else:
      return "play"

def play_game():
  print_board()
  player = "X"
  computer = "O"
  game_over = False
  while (game_over!=True):
    take_turn(player)
    result = check_game_over()
    if result == "win":
      print(player + " wins!")
      game_over = True
    elif result == "tie":
      print("It's a tie!")
      game_over = True
    else:
        take_turn_computer(computer)
        result = check_game_over()
        if result == "win":
          print(computer + " wins!")
          game_over = True
        elif result == "tie":
          print("It's a tie!")
          game_over = True


play_game()
     
TIC_TAC_TOE
- | - | -
- | - | -
- | - | -
X's turn.
Choose a position from 1-9: 1
X | - | -
- | - | -
- | - | -
O's turn.
X | - | -
- | - | O
- | - | -
X's turn.
Choose a position from 1-9: 3
X | - | X
- | - | O
- | - | -
O's turn.
X | - | X
O | - | O
- | - | -
X's turn.
Choose a position from 1-9: 5
X | - | X
O | X | O
- | - | -
O's turn.
X | - | X
O | X | O
- | O | -
X's turn.
Choose a position from 1-9: 7
X | - | X
O | X | O
X | O | -
X wins!

print("Vacuum Cleaner")

A=[1,1] # Room A: Vacuum present, Dirt present
B=[0,1] # Room B: Vacuum absent, Dirt present

def cleanCheck(A,B):
  if(A[1] == 0 and B[1] == 0):
    return True
  else:
    return False
def clean_room():
  print("Initial State: Room A",A,", Room B",B)

  while not cleanCheck(A,B):

    if(A[0] == 1):
      A[1] = 0
      A[0] = 0
      B[0] = 1
      print("Vacuum cleaner moved to room B. Room A cleaned.")

    elif(B[0] == 1):
      B[1] = 0
      B[0] = 0
      A[0] = 1
      print("Vacuum cleaner moved to room A. Room B cleaned.")

  print("Final State: Room A",A,", Room B",B)

clean_room()
     
Vacuum Cleaner
Initial State: Room A [1, 1] , Room B [0, 1]
Vacuum cleaner moved to room B. Room A cleaned.
Vacuum cleaner moved to room A. Room B cleaned.
Final State: Room A [1, 0] , Room B [0, 0]
